@Test
public void Test4() throws InterruptedException{
	try {
		driver.getCurrentUrl();
		Thread.sleep(5000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,350)", "");
		Thread.sleep(5000);
		WebElement tablist = driver.findElement(By.xpath("//div[@role='tablist']"));
		WebElement[] tabs = new WebElement[30];
		for(int i=17; i<=21; i++)
		{
			String path = "(//span[@dir='auto'])"+"["+i+"]";
		    tabs[i]=tablist.findElement(By.xpath(path));
			Thread.sleep(3000);
		}
		System.out.println("All the tabs were successfully traversed");
	}
	catch (Exception e) {
	    System.out.println("Test4 failed");
	    System.out.println(e);
	    
	}
	}



1. Unit Testing - Unit testing is testing small, individual components of the software.
2. Smoke Tests - A smoke test is a functional test that determines whether or not a build is stable. 
3. Integration Tests - These functional tests make sure that all of the individual pieces of software test are well when operating as a whole. 


4. Regression Tests - Regression tests are both functional and non-functional, ensuring that no part of the software has regressed after changes are made. 
5. API Testing - The application programming interface or API acts as the conduit between all the other systems that your software needs to function.
6. Security Tests - Security tests are also functional and non-functional. Their purpose is to check everything for security weaknesses that can be exploited. 



7. Performance Tests - Non-functional performance tests evaluate stability and responsiveness. They ensure that the software can handle stress and deliver a better and more reliable user experience.
8. Acceptance Tests - Acceptance tests are functional tests that try to determine how end-users will respond to the final product.. 
9. UI Tests- User interface tests are one of the last tests in the process. This test is designed to accurately replicate a typical user experience.



